// db/schema/videos.ts
import {
    pgTable,
    text,
    timestamp,
    boolean,
    integer,
    uuid,
    index,
    json,
    check,
    unique,
    decimal
} from "drizzle-orm/pg-core";
import { relations, sql } from "drizzle-orm";
import { boxes, boxMemberships } from "./core";
import {athletePrs} from "@/db/schema/athletes";
import {feedbackTypeEnum, shareTypeEnum, socialPlatformEnum} from "@/db/schema/enums";

// Coach feedback on PR videos - core to the strategy
export const prCoachFeedback = pgTable("pr_coach_feedback", {
    id: uuid("id").defaultRandom().primaryKey(),
    prId: uuid("pr_id").references(() => athletePrs.id, { onDelete: "cascade" }).notNull(),
    coachMembershipId: uuid("coach_membership_id").references(() => boxMemberships.id, { onDelete: "cascade" }).notNull(),

    // Feedback content
    feedback: text("feedback").notNull(),
    feedbackType: feedbackTypeEnum("feedback_type").notNull(),
    isPublic: boolean("is_public").default(true).notNull(),

    // Video-specific features
    videoTimestamp: decimal("video_timestamp", { precision: 8, scale: 3 }), // Seconds into video
    highlightStartTime: decimal("highlight_start_time", { precision: 8, scale: 3 }),
    highlightEndTime: decimal("highlight_end_time", { precision: 8, scale: 3 }),

    // Engagement tracking
    isRead: boolean("is_read").default(false).notNull(),
    athleteResponse: text("athlete_response"),
    athleteResponseAt: timestamp("athlete_response_at", { withTimezone: true }),

    // Metadata
    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    prIdIdx: index("pr_coach_feedback_pr_id_idx").on(table.prId),
    coachIdIdx: index("pr_coach_feedback_coach_id_idx").on(table.coachMembershipId),
    feedbackTypeIdx: index("pr_coach_feedback_type_idx").on(table.feedbackType),
    createdAtIdx: index("pr_coach_feedback_created_at_idx").on(table.createdAt),

    // Constraint for video timestamps
    validTimestamps: check(
        "pr_coach_feedback_valid_timestamps",
        sql`${table.videoTimestamp} >= 0 AND 
            (${table.highlightStartTime} IS NULL OR ${table.highlightStartTime} >= 0) AND
            (${table.highlightEndTime} IS NULL OR ${table.highlightEndTime} > ${table.highlightStartTime})`
    )
}));

// Social sharing of PR videos - for community engagement
export const videoSocialShares = pgTable("video_social_shares", {
    id: uuid("id").defaultRandom().primaryKey(),
    prId: uuid("pr_id").references(() => athletePrs.id, { onDelete: "cascade" }).notNull(),

    // Sharing details
    platform: socialPlatformEnum("platform").notNull(),
    shareType: shareTypeEnum("share_type").default("pr_celebration").notNull(),
    caption: text("caption"),
    isAutoGenerated: boolean("is_auto_generated").default(false).notNull(),

    // Privacy and moderation
    isPublic: boolean("is_public").default(false).notNull(),
    moderationStatus: text("moderation_status").default("pending").notNull(), // "pending", "approved", "rejected"
    moderatedBy: uuid("moderated_by").references(() => boxMemberships.id),
    moderatedAt: timestamp("moderated_at", { withTimezone: true }),
    moderationNotes: text("moderation_notes"),

    // Engagement metrics
    views: integer("views").default(0).notNull(),
    likes: integer("likes").default(0).notNull(),
    comments: integer("comments").default(0).notNull(),
    shares: integer("shares").default(0).notNull(),

    // Metadata
    sharedAt: timestamp("shared_at", { withTimezone: true }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    prIdIdx: index("video_social_shares_pr_id_idx").on(table.prId),
    platformIdx: index("video_social_shares_platform_idx").on(table.platform),
    sharedAtIdx: index("video_social_shares_shared_at_idx").on(table.sharedAt),
    moderationStatusIdx: index("video_social_shares_moderation_status_idx").on(table.moderationStatus),

    // Composite index for box feed queries
    platformSharedAtIdx: index("video_social_shares_platform_shared_at_idx").on(table.platform, table.sharedAt),

    // Constraints
    engagementPositive: check(
        "video_social_shares_engagement_positive",
        sql`${table.views} >= 0 AND ${table.likes} >= 0 AND ${table.comments} >= 0 AND ${table.shares} >= 0`
    )
}));

// Video celebration events - for tracking PR celebrations and confetti triggers
export const videoCelebrationEvents = pgTable("video_celebration_events", {
    id: uuid("id").defaultRandom().primaryKey(),
    prId: uuid("pr_id").references(() => athletePrs.id, { onDelete: "cascade" }).notNull(),
    boxId: uuid("box_id").references(() => boxes.id, { onDelete: "cascade" }).notNull(),
    membershipId: uuid("membership_id").references(() => boxMemberships.id, { onDelete: "cascade" }).notNull(),

    // Celebration details
    celebrationType: text("celebration_type").notNull(), // "first_video", "milestone", "streak", "pr_achievement"
    celebrationData: json("celebration_data"), // Stores confetti settings, badges awarded, etc.

    // Engagement tracking
    wasViewed: boolean("was_viewed").default(false).notNull(),
    viewedAt: timestamp("viewed_at", { withTimezone: true }),
    interactionCount: integer("interaction_count").default(0).notNull(),

    // Auto-generated social content
    autoShareGenerated: boolean("auto_share_generated").default(false).notNull(),
    shareText: text("share_text"),

    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    prIdIdx: index("video_celebration_events_pr_id_idx").on(table.prId),
    boxMembershipIdx: index("video_celebration_events_box_membership_idx").on(table.boxId, table.membershipId),
    celebrationTypeIdx: index("video_celebration_events_type_idx").on(table.celebrationType),
    createdAtIdx: index("video_celebration_events_created_at_idx").on(table.createdAt),

    // Constraint
    interactionCountPositive: check(
        "video_celebration_events_interaction_count_positive",
        sql`${table.interactionCount} >= 0`
    )
}));

// Video review assignments - for coach workflow management
export const videoReviewAssignments = pgTable("video_review_assignments", {
    id: uuid("id").defaultRandom().primaryKey(),
    prId: uuid("pr_id").references(() => athletePrs.id, { onDelete: "cascade" }).notNull(),
    assignedCoachId: uuid("assigned_coach_id").references(() => boxMemberships.id, { onDelete: "cascade" }).notNull(),
    assignedBy: uuid("assigned_by").references(() => boxMemberships.id),

    // Assignment details
    priority: text("priority").default("medium").notNull(), // "low", "medium", "high", "urgent"
    dueDate: timestamp("due_date", { withTimezone: true }),
    assignmentNotes: text("assignment_notes"),

    // Status tracking
    status: text("status").default("pending").notNull(), // "pending", "in_review", "completed", "skipped"
    reviewStartedAt: timestamp("review_started_at", { withTimezone: true }),
    completedAt: timestamp("completed_at", { withTimezone: true }),

    // Review outcomes
    reviewNotes: text("review_notes"),
    actionTaken: text("action_taken"), // "feedback_given", "technique_correction", "celebration", "no_action"

    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    prIdIdx: index("video_review_assignments_pr_id_idx").on(table.prId),
    assignedCoachIdx: index("video_review_assignments_assigned_coach_idx").on(table.assignedCoachId),
    statusIdx: index("video_review_assignments_status_idx").on(table.status),
    priorityIdx: index("video_review_assignments_priority_idx").on(table.priority),
    dueDateIdx: index("video_review_assignments_due_date_idx").on(table.dueDate),

    // Composite indexes for coach workflows
    coachStatusIdx: index("video_review_assignments_coach_status_idx").on(table.assignedCoachId, table.status),
    statusPriorityIdx: index("video_review_assignments_status_priority_idx").on(table.status, table.priority),

    // Unique constraint to prevent duplicate assignments
    prCoachUnique: unique("video_review_assignments_pr_coach_unique").on(table.prId, table.assignedCoachId)
}));

// Video engagement analytics - for measuring success of video strategy
export const videoEngagementAnalytics = pgTable("video_engagement_analytics", {
    id: uuid("id").defaultRandom().primaryKey(),
    prId: uuid("pr_id").references(() => athletePrs.id, { onDelete: "cascade" }).notNull(),
    boxId: uuid("box_id").references(() => boxes.id, { onDelete: "cascade" }).notNull(),

    // View analytics
    totalViews: integer("total_views").default(0).notNull(),
    uniqueViews: integer("unique_views").default(0).notNull(),
    avgWatchTime: decimal("avg_watch_time", { precision: 8, scale: 3 }).default("0").notNull(),
    completionRate: decimal("completion_rate", { precision: 5, scale: 2 }).default("0").notNull(), // Percentage

    // Engagement metrics
    coachFeedbackCount: integer("coach_feedback_count").default(0).notNull(),
    athleteResponses: integer("athlete_responses").default(0).notNull(),
    socialShares: integer("social_shares").default(0).notNull(),
    celebrationViews: integer("celebration_views").default(0).notNull(),

    // Quality scores
    technicalScore: decimal("technical_score", { precision: 5, scale: 2 }), // AI/coach assigned score
    engagementScore: decimal("engagement_score", { precision: 5, scale: 2 }), // Calculated score

    // Time periods for analytics
    lastCalculatedAt: timestamp("last_calculated_at", { withTimezone: true }).defaultNow().notNull(),
    weeklyViews: integer("weekly_views").default(0).notNull(),
    monthlyViews: integer("monthly_views").default(0).notNull(),

    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    prIdIdx: index("video_engagement_analytics_pr_id_idx").on(table.prId),
    boxIdIdx: index("video_engagement_analytics_box_id_idx").on(table.boxId),
    lastCalculatedIdx: index("video_engagement_analytics_last_calculated_idx").on(table.lastCalculatedAt),

    // Composite indexes for analytics queries
    boxEngagementIdx: index("video_engagement_analytics_box_engagement_idx").on(table.boxId, table.engagementScore),

    // Constraints
    analyticsPositive: check(
        "video_engagement_analytics_positive",
        sql`${table.totalViews} >= 0 AND ${table.uniqueViews} >= 0 AND 
            ${table.avgWatchTime} >= 0 AND ${table.completionRate} >= 0 AND ${table.completionRate} <= 100 AND
            ${table.coachFeedbackCount} >= 0 AND ${table.athleteResponses} >= 0 AND
            ${table.socialShares} >= 0 AND ${table.celebrationViews} >= 0`
    ),

    // Unique constraint for one record per PR
    prIdUnique: unique("video_engagement_analytics_pr_id_unique").on(table.prId)
}));

// Member video preferences - for privacy and engagement settings
export const memberVideoPreferences = pgTable("member_video_preferences", {
    id: uuid("id").defaultRandom().primaryKey(),
    membershipId: uuid("membership_id").references(() => boxMemberships.id, { onDelete: "cascade" }).notNull(),
    boxId: uuid("box_id").references(() => boxes.id, { onDelete: "cascade" }).notNull(),

    // Privacy preferences
    defaultVideoConsent: text("default_video_consent").array().default(sql`ARRAY['coaching']`).notNull(), // Default consent types
    allowCoachFeedback: boolean("allow_coach_feedback").default(true).notNull(),
    allowBoxSharing: boolean("allow_box_sharing").default(true).notNull(),
    allowPublicSharing: boolean("allow_public_sharing").default(false).notNull(),

    // Notification preferences
    notifyOnCoachFeedback: boolean("notify_on_coach_feedback").default(true).notNull(),
    notifyOnVideoProcessed: boolean("notify_on_video_processed").default(true).notNull(),
    notifyOnCelebration: boolean("notify_on_celebration").default(true).notNull(),
    notifyOnSocialShare: boolean("notify_on_social_share").default(true).notNull(),

    // Video quality preferences
    preferredVideoQuality: text("preferred_video_quality").default("standard").notNull(), // "standard", "hd", "premium"
    autoGenerateThumbnails: boolean("auto_generate_thumbnails").default(true).notNull(),

    // Engagement preferences
    enableConfettiCelebrations: boolean("enable_confetti_celebrations").default(true).notNull(),
    participateInLeaderboards: boolean("participate_in_leaderboards").default(true).notNull(),
    allowTechniqueSuggestions: boolean("allow_technique_suggestions").default(true).notNull(),

    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    membershipIdIdx: index("member_video_preferences_membership_id_idx").on(table.membershipId),
    boxIdIdx: index("member_video_preferences_box_id_idx").on(table.boxId),

    // Unique constraint - one preference set per membership
    membershipBoxUnique: unique("member_video_preferences_membership_box_unique").on(table.membershipId, table.boxId)
}));

// Video milestone tracking - for gamification
export const videoMilestones = pgTable("video_milestones", {
    id: uuid("id").defaultRandom().primaryKey(),
    membershipId: uuid("membership_id").references(() => boxMemberships.id, { onDelete: "cascade" }).notNull(),
    boxId: uuid("box_id").references(() => boxes.id, { onDelete: "cascade" }).notNull(),

    // Milestone details
    milestoneType: text("milestone_type").notNull(), // "first_video", "video_count", "streak", "feedback_engagement"
    milestoneValue: integer("milestone_value").notNull(), // The number achieved (e.g., 10 for "10 videos")
    description: text("description").notNull(),

    // Achievement tracking
    achievedAt: timestamp("achieved_at", { withTimezone: true }).defaultNow().notNull(),
    wasRecognized: boolean("was_recognized").default(false).notNull(),
    recognizedAt: timestamp("recognized_at", { withTimezone: true }),

    // Related records
    triggeringPrId: uuid("triggering_pr_id").references(() => athletePrs.id),
    badgeAwarded: boolean("badge_awarded").default(false).notNull(),

    // Celebration data
    celebrationLevel: text("celebration_level").default("standard").notNull(), // "minimal", "standard", "epic"

    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    membershipIdIdx: index("video_milestones_membership_id_idx").on(table.membershipId),
    milestoneTypeIdx: index("video_milestones_milestone_type_idx").on(table.milestoneType),
    achievedAtIdx: index("video_milestones_achieved_at_idx").on(table.achievedAt),

    // Composite indexes
    membershipTypeIdx: index("video_milestones_membership_type_idx").on(table.membershipId, table.milestoneType),

    // Constraints
    milestoneValuePositive: check(
        "video_milestones_milestone_value_positive",
        sql`${table.milestoneValue} > 0`
    )
}));

// Box video settings - for gym-wide video strategy configuration
export const boxVideoSettings = pgTable("box_video_settings", {
    id: uuid("id").defaultRandom().primaryKey(),
    boxId: uuid("box_id").references(() => boxes.id, { onDelete: "cascade" }).notNull(),

    // Feature toggles
    enableVideoUploads: boolean("enable_video_uploads").default(true).notNull(),
    enableCoachFeedback: boolean("enable_coach_feedback").default(true).notNull(),
    enableSocialSharing: boolean("enable_social_sharing").default(true).notNull(),
    enableCelebrations: boolean("enable_celebrations").default(true).notNull(),
    enableLeaderboards: boolean("enable_leaderboards").default(true).notNull(),

    // Video requirements
    requireVideoForPRs: boolean("require_video_for_prs").default(false).notNull(),
    minimumVideoLength: integer("minimum_video_length").default(3).notNull(), // seconds
    maximumVideoLength: integer("maximum_video_length").default(300).notNull(), // 5 minutes

    // Moderation settings
    requireModerationForSharing: boolean("require_moderation_for_sharing").default(true).notNull(),
    autoApproveTrustedMembers: boolean("auto_approve_trusted_members").default(false).notNull(),

    // Coach assignment settings
    autoAssignVideoReviews: boolean("auto_assign_video_reviews").default(true).notNull(),
    maxReviewsPerCoach: integer("max_reviews_per_coach").default(10).notNull(),
    reviewTimeoutHours: integer("review_timeout_hours").default(48).notNull(),

    // Celebration settings
    celebrationThresholds: json("celebration_thresholds"), // Stores milestone values for celebrations
    enableConfettiAnimations: boolean("enable_confetti_animations").default(true).notNull(),
    enableBadgeNotifications: boolean("enable_badge_notifications").default(true).notNull(),

    // Analytics settings
    trackVideoAnalytics: boolean("track_video_analytics").default(true).notNull(),
    shareAnalyticsWithMembers: boolean("share_analytics_with_members").default(false).notNull(),

    // Storage and quality settings
    defaultVideoQuality: text("default_video_quality").default("standard").notNull(),
    enableVideoCompression: boolean("enable_video_compression").default(true).notNull(),
    retentionPolicyDays: integer("retention_policy_days").default(365).notNull(), // Keep videos for 1 year

    createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
    updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
}, (table) => ({
    boxIdIdx: index("box_video_settings_box_id_idx").on(table.boxId),

    // Unique constraint - one setting per box
    boxIdUnique: unique("box_video_settings_box_id_unique").on(table.boxId),

    // Constraints
    videoLengthValid: check(
        "box_video_settings_video_length_valid",
        sql`${table.minimumVideoLength} >= 1 AND ${table.maximumVideoLength} >= ${table.minimumVideoLength}`
    ),
    maxReviewsPositive: check(
        "box_video_settings_max_reviews_positive",
        sql`${table.maxReviewsPerCoach} > 0`
    ),
    reviewTimeoutPositive: check(
        "box_video_settings_review_timeout_positive",
        sql`${table.reviewTimeoutHours} > 0`
    ),
    retentionPolicyPositive: check(
        "box_video_settings_retention_policy_positive",
        sql`${table.retentionPolicyDays} > 0`
    )
}));

// Relations for new tables
export const prCoachFeedbackRelations = relations(prCoachFeedback, ({ one }) => ({
    pr: one(athletePrs, {
        fields: [prCoachFeedback.prId],
        references: [athletePrs.id],
        relationName: "pr_feedback"
    }),
    coach: one(boxMemberships, {
        fields: [prCoachFeedback.coachMembershipId],
        references: [boxMemberships.id],
        relationName: "coach_feedback"
    })
}));

export const videoSocialSharesRelations = relations(videoSocialShares, ({ one }) => ({
    pr: one(athletePrs, {
        fields: [videoSocialShares.prId],
        references: [athletePrs.id],
        relationName: "pr_social_shares"
    }),
    moderatedByMember: one(boxMemberships, {
        fields: [videoSocialShares.moderatedBy],
        references: [boxMemberships.id],
        relationName: "moderated_shares"
    })
}));

export const videoCelebrationEventsRelations = relations(videoCelebrationEvents, ({ one }) => ({
    pr: one(athletePrs, {
        fields: [videoCelebrationEvents.prId],
        references: [athletePrs.id],
        relationName: "pr_celebrations"
    }),
    box: one(boxes, {
        fields: [videoCelebrationEvents.boxId],
        references: [boxes.id],
        relationName: "box_celebrations"
    }),
    membership: one(boxMemberships, {
        fields: [videoCelebrationEvents.membershipId],
        references: [boxMemberships.id],
        relationName: "member_celebrations"
    })
}));

export const videoReviewAssignmentsRelations = relations(videoReviewAssignments, ({ one }) => ({
    pr: one(athletePrs, {
        fields: [videoReviewAssignments.prId],
        references: [athletePrs.id],
        relationName: "pr_review_assignments"
    }),
    assignedCoach: one(boxMemberships, {
        fields: [videoReviewAssignments.assignedCoachId],
        references: [boxMemberships.id],
        relationName: "assigned_coach_reviews"
    }),
    assignedByMember: one(boxMemberships, {
        fields: [videoReviewAssignments.assignedBy],
        references: [boxMemberships.id],
        relationName: "review_assignments_created"
    })
}));

export const videoEngagementAnalyticsRelations = relations(videoEngagementAnalytics, ({ one }) => ({
    pr: one(athletePrs, {
        fields: [videoEngagementAnalytics.prId],
        references: [athletePrs.id],
        relationName: "pr_analytics"
    }),
    box: one(boxes, {
        fields: [videoEngagementAnalytics.boxId],
        references: [boxes.id],
        relationName: "box_video_analytics"
    })
}));

export const memberVideoPreferencesRelations = relations(memberVideoPreferences, ({ one }) => ({
    membership: one(boxMemberships, {
        fields: [memberVideoPreferences.membershipId],
        references: [boxMemberships.id],
        relationName: "member_video_preferences"
    }),
    box: one(boxes, {
        fields: [memberVideoPreferences.boxId],
        references: [boxes.id],
        relationName: "box_member_video_preferences"
    })
}));

export const videoMilestonesRelations = relations(videoMilestones, ({ one }) => ({
    membership: one(boxMemberships, {
        fields: [videoMilestones.membershipId],
        references: [boxMemberships.id],
        relationName: "member_video_milestones"
    }),
    box: one(boxes, {
        fields: [videoMilestones.boxId],
        references: [boxes.id],
        relationName: "box_video_milestones"
    }),
    triggeringPr: one(athletePrs, {
        fields: [videoMilestones.triggeringPrId],
        references: [athletePrs.id],
        relationName: "milestone_triggering_pr"
    })
}));

export const boxVideoSettingsRelations = relations(boxVideoSettings, ({ one }) => ({
    box: one(boxes, {
        fields: [boxVideoSettings.boxId],
        references: [boxes.id],
        relationName: "box_video_settings"
    })
}));
